// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in;
in vec4 view_pos_fs_in;
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  float angle = animation_seconds * M_PI / 3.0;
  float dist = 2;
  vec4 rot = view * vec4(dist * vec3(cos(angle), 1, sin(angle)), 1.0);

  vec3 ka;
  vec3 kd;
  vec3 ks;
  float p;
  vec3 n = normalize(normal_fs_in);
  vec3 v = normalize(-view_pos_fs_in.xyz/view_pos_fs_in.w);
  vec3 l = normalize((rot/rot.w).xyz - view_pos_fs_in.xyz/view_pos_fs_in.w);
  vec3 base;

  // Add cool-ass noise based colors
  float noise1 = perlin_noise(2 * vec3(2 * normal_fs_in.x, 9 * sin(sphere_fs_in.y), 4 * sin(sphere_fs_in.x * normal_fs_in.z * (perlin_noise(9 * sphere_fs_in + 2 *  normal_fs_in)))));
  float noise2 = 8*perlin_noise(9*sphere_fs_in);
  float noise3 = -2 * sin(sphere_fs_in.y * 5 + sphere_fs_in.z*30 + sphere_fs_in.x + 8*perlin_noise(8*sphere_fs_in));

  if(is_moon){
    ka = vec3(0.1);
    kd = vec3(0.4 + noise2);
    ks = vec3(0.3);
    p = 100;
    base = vec3(0.4);
  }
  else{
    ka = vec3(0.3 + 0.03 * noise3);
    kd = vec3(0.4, 0.3, 0.8 + noise3);
    ks = vec3(0.9);
    p = 1000;
    base = vec3(0.2, 0.2, 1);
  }

  color = base * blinn_phong(ka, kd, ks, p, n, v, l);
  return;
}
